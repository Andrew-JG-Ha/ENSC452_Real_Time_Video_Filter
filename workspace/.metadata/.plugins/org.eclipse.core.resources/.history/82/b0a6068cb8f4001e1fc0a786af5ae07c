#include "image_data.h"

#include "hardware_functions.h"

void storeImageInDDR() {
	rawDataStorage = (u8*)*VGA_BUFFER;
	imageStorage = (u8*) 0x06000000;

	u8 BMP_IMAGE_HEADER[] = {
		    // Bitmap File Header (14 bytes)
		    0x42, 0x4D,             // BM (bitmap identifier)
		    0x82, 0x00, 0x00, 0x00, // File size in bytes (70 bytes including headers and pixel data)
		    0x00, 0x00,             // Reserved (unused)
		    0x00, 0x00,             // Reserved (unused)
		    0x7A, 0x00, 0x00, 0x00, // Offset to start of pixel data (122 bytes including headers)

		    // DIB Header (40 bytes)
		    0x6C, 0x00, 0x00, 0x00, // DIB header size (40 bytes)
		    0x80, 0x02, 0x00, 0x00, // Image width (640 pixels)
		    0xE0, 0x01, 0x00, 0x00, // Image height (480 pixels)
		    0x01, 0x00,             // Number of color planes (must be 1)
		    0x10, 0x00,             // Bits per pixel (16 bits per pixel)
		    0x03, 0x00, 0x00, 0x00, // Compression method (BI_BITFIELDS)
		    0x7A, 0x60, 0x09, 0x00, // Size of raw image data
		    0xC4, 0x0E, 0x00, 0x00, // Horizontal resolution
		    0xC4, 0x0E, 0x00, 0x00, // Vertical resolution
		    0x00, 0x00, 0x00, 0x00, // Number of colors in the palette (not used)
		    0x00, 0x00, 0x00, 0x00, // Number of important colors (not used)

		    // Color Masks for RGBA4444 (16 bytes)
		    0x00, 0x0F, 0x00, 0x00, // Red mask (4 bytes)
		    0x00, 0xF0, 0x00, 0x00, // Green mask (4 bytes)
		    0x0F, 0x00, 0x00, 0x00, // Blue mask (4 bytes)
		    0xF0, 0x00, 0x00, 0x00, // Alpha mask (4 bytes)

			//52 bytes of 0x00 for some reason
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00,
	};

	BMP_HEADER_SIZE = sizeof(BMP_IMAGE_HEADER);
	BMP_DATA_SIZE = 640*480*2; // Factor of 2 due to 2 bytes per pixel in the BMP image
	for (int i=0; i < BMP_HEADER_SIZE; i++) {
		imageStorage[i] = BMP_IMAGE_HEADER[i];
	}

	u8 alpha = 0xF0;
	RGB rgb_data;
	HSV hsv_data;
	printf("%f\r\n", HSV_modifiers.vmod);

	for (int j = 0; j < BMP_DATA_SIZE/2; j++) {
		//Isolate blue, green, and red components
		rgb_data.b = rawDataStorage[j*4 + 2] >> 4;
		rgb_data.g = rawDataStorage[j*4 + 1] >> 4;
		rgb_data.r = rawDataStorage[j*4] >> 4;

		imageStorage[BMP_HEADER_SIZE + j*2] = (alpha | rgb_data.b);
		imageStorage[BMP_HEADER_SIZE + j*2 + 1] = ((rgb_data.g << 4)| rgb_data.r);
	}
}

void write_BMP_to_SDCard() {
	xil_printf("write_BMP_to_SDCARD started running.\r\n");

	FRESULT Result;
	UINT NumBytesWritten;
	BYTE work[FF_MAX_SS];
	u32 FileSize = BMP_HEADER_SIZE + BMP_DATA_SIZE;
	TCHAR *path = "0:/";

	// Force mount the default drive on the SD Card and check if it is ready to work
	Result = f_mount(&Fatfs, path, 0);
	if (Result != FR_OK) {
		xil_printf("Error mounting SD Card.\r\n");
		xil_printf("Result holds %d for debugging purposes.\r\n", Result);
		return;
	}

	Result = f_mkfs(path, FM_FAT32, 0, work, sizeof(work));
	if (Result != FR_OK) {
		xil_printf("Error initializing FAT32 System Parameters on SD Card.\r\n");
		xil_printf("Result holds %d for debugging purposes.\r\n", Result);
		return;
	}

	SD_File = (char * ) FileName;

//	generate_filename(SD_File);

	//Create a file to write to
	Result = f_open(&File, SD_File , FA_WRITE | FA_CREATE_ALWAYS | FA_READ);
	if (Result != FR_OK) {
			xil_printf("Error creating file on SD Card.\r\n");
			xil_printf("Result holds %d for debugging purposes.\r\n", Result);
			return;
	}

	//Set the file read/write pointer to the beginning of file
	Result = f_lseek(&File, 0);
	if (Result != FR_OK) {
		xil_printf("Error setting file pointer for writing to beginning of file on SD Card.\r\n");
		xil_printf("Result holds %d for debugging purposes.\r\n", Result);
		return;
	}

	//Write bmp data to file
	Result = f_write(&File, (const void*) imageStorage, FileSize, &NumBytesWritten);
	if (Result != FR_OK) {
			xil_printf("Error writing to file on SD Card.\r\n");
			xil_printf("Result holds %d for debugging purposes.\r\n", Result);
			f_close(&File);
			return;
	}

	//Close the file
    Result = f_close(&File);
    if (Result != FR_OK) {
        xil_printf("Error closing file on SD Card.\r\n");
        xil_printf("Result holds %d for debugging purposes.\r\n", Result);
        return;
    }

	// Force unmount the default drive on the SD Card and check if it is ready to work
	Result = f_mount(0, path, 0);
	if (Result != FR_OK) {
		xil_printf("Error unmounting SD Card.\r\n");
		xil_printf("Result holds %d for debugging purposes.\r\n", Result);
		return;
	}
	xil_printf("Image stored to SD Card!\r\n");
}

void generate_filename(char *filename) {
    sprintf(filename, "Image_%d.bmp", imageNumber);
    imageNumber++;
}

HSV RGB_to_HSV(RGB data) {
	HSV hsv_data;
	float red = (float) data.r/15.0;
	float green = (float) data.g/15.0;
	float blue = (float) data.b/15.0;

	float cmax = (red > green) ? red : green;
	cmax = (blue > cmax) ? blue : cmax;
	float cmin = (red < green) ? red : green;
	cmin = (blue < cmin) ? blue : cmin;

	float delta = cmax - cmin;

	//Hue Calculation: offsets of 0, 120, and 240 relate to the degree around the hue wheel
	if (delta == 0) {
		hsv_data.h = 0;
	}
	else if (cmax == red) {
		hsv_data.h = 60*((green - blue)/delta);
	}
	else if (cmax == green) {
		hsv_data.h = 60*((blue - red)/delta) + 120;
	}
	else if (cmax == blue) {
		hsv_data.h = 60*((red - green)/delta) + 240;
	}

	//Saturation Calculation
	hsv_data.s = (cmax == 0) ? 0 : delta/cmax;

	//Value Calculation
	hsv_data.v = cmax;

	return hsv_data;
}

RGB HSV_to_RGB(HSV data) {
	RGB rgb_data;
	long integer;
	float fractional, p, q, t;

	data.s = (data.s < 0) ? 0 : data.s;
	data.s = (data.s > 1) ? 1 : data.s;

	if (data.s == 0) {
		data.v = (data.v < 0) ? 0 : data.v;
		data.v = (data.v > 1) ? 1 : data.v;
		rgb_data.r = (u8) (data.v * 15);
		rgb_data.g = (u8) (data.v * 15);
		rgb_data.b = (u8) (data.v * 15);
	}
	data.h = (data.h > 360) ? 360 : data.h;
	data.h = (data.h < 0) ? 0 : data.h;
	data.h /= 60; // Normalize hue into the six segments of the colour wheel

	//Determine the integer and fractional parts of the colour wheel segment
	integer = (long) data.h;
	fractional = data.h - integer;

	p = data.v * (1 - data.s);
	p = (p > 1) ? 1 : p;
	p = (p < 0) ? 0 : p;
	q = data.v * (1 - data.s * fractional);
	q = (q > 1) ? 1 : q;
	q = (q < 0) ? 0 : q;
	t = data.v * (1 - data.s * (1 - fractional));
	t = (t > 1) ? 1 : t;
	t = (t < 0) ? 0 : t;

	switch(integer) {
		case 0: // 0th colour segment
			rgb_data.r = (u8) (data.v * 15);
			rgb_data.g = (u8) (t * 15);
			rgb_data.b = (u8) (p * 15);
			break;
		case 1: // 1st colour segment
			rgb_data.r = (u8) (q * 15);
			rgb_data.g = (u8) (data.v * 15);
			rgb_data.b = (u8) (p * 15);
			break;
		case 2: // 2nd colour segment
			rgb_data.g = (u8) (data.v * 15);
			rgb_data.r = (u8) (p * 15);
			rgb_data.b = (u8) (t * 15);
			break;
		case 3: // 3rd colour segment
			rgb_data.r = (u8) (p * 15);
			rgb_data.g = (u8) (q * 15);
			rgb_data.b = (u8) (data.v * 15);
			break;
		case 4: // 4th colour segment
			rgb_data.r = (u8) (t * 15);
			rgb_data.g = (u8) (p * 15);
			rgb_data.b = (u8) (data.v * 15);
			break;
		default: // 5th colour segment
			rgb_data.r = (u8) (data.v * 15);
			rgb_data.g = (u8) (p * 15);
			rgb_data.b = (u8) (q * 15);
			break;
	}
	return rgb_data;
}
